function (self, unitId, unitFrame, envTable)
    
    --colors for each time bracket
    envTable.Colors = {
        critical = "red",
        warning = "yellow",
        okay = "white",
    }
    
    --time amount to enter in warning or critical state
    envTable.Timers = {
        critical = 4.9,
        warning = 8,
    }
    
end

function (self, unitId, unitFrame, envTable)
    
    local auraContainers = {unitFrame.BuffFrame.PlaterBuffList}
    
    if (Plater.db.profile.buffs_on_aura2) then
        auraContainers [2] = unitFrame.BuffFrame2.PlaterBuffList
    end
    
    for containerID = 1, #auraContainers do
        local auraContainer = auraContainers [containerID]
        for index, auraIcon in ipairs (auraContainer) do
            if (auraIcon:IsVisible()) then
                if (auraIcon.RemainingTime < envTable.Timers.critical) then
                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.critical)
                    
                elseif (auraIcon.RemainingTime < envTable.Timers.warning) then
                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.warning)
                    
                else
                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.okay)
                end 
            end
            
        end
    end
    
    
    for _, auraIcon in ipairs (unitFrame.ExtraIconFrame.IconPool) do
        if auraIcon:IsShown() then
            if (auraIcon:IsVisible()) then
                local remainingTime = (auraIcon.startTime + auraIcon.duration - GetTime())
                if (remainingTime < envTable.Timers.critical) then
                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.critical)
                    
                elseif (remainingTime < envTable.Timers.warning) then
                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.warning)
                    
                else
                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.okay)
                end
            end
        end
    end
    
end
